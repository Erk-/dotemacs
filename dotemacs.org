#+TITLE: DotEmacs
#+AUTHOR: Valdemar Erk
* Table of content                                                      :TOC:
- [[#bootstrap][Bootstrap]]
  - [[#user-information][User information]]
  - [[#initial-setup][Initial setup]]
  - [[#authentication][Authentication]]
- [[#gui][Gui]]
  - [[#intro][Intro]]
  - [[#modeline][Modeline]]
  - [[#dashboard][Dashboard]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#goggles][Goggles]]
  - [[#perspective-disabled][Perspective [Disabled]]]
- [[#editor][Editor]]
  - [[#editorconfig][EditorConfig]]
  - [[#parinfer][Parinfer]]
  - [[#corfu][Corfu]]
  - [[#yasnippet][Yasnippet]]
- [[#calender][Calender]]
- [[#org-mode][Org mode]]
- [[#org-mode-blog][Org-mode blog]]
- [[#rss][RSS]]
- [[#disabled-irc][{Disabled} IRC]]
- [[#selectrum][Selectrum]]
- [[#mail-wanderlust][Mail [Wanderlust]]]
- [[#lsp][LSP]]
- [[#rust][Rust]]
- [[#ocaml][OCaml]]
- [[#magit][Magit]]
- [[#zig][Zig]]
- [[#misc][Misc]]
  - [[#pdf-viewer][PDF viewer]]
  - [[#futhark][Futhark]]
  - [[#restart-emacs][Restart emacs]]
  - [[#vterm][Vterm]]
  - [[#tree-sitter][Tree-Sitter]]
  - [[#stumpvm][StumpVM]]
  - [[#emacs-everywhere][Emacs Everywhere]]
  - [[#godbolt][Godbolt]]
- [[#keybinds][Keybinds]]

* Bootstrap
** User information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Valdemar Erk"
      user-mail-address "valdemar@erk.dev")

;; Matches "password" or "token"
;; generated with (regexp-opt '("password" "token"))
(setq authinfo-hidden "\\(?:password\\|token\\)")
(setq auth-sources '("~/.authinfo.gpg"))
#+END_SRC
** Initial setup
#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(setq
 backup-by-copying      t                         ; don't clobber symlinks
 backup-directory-alist '(("." . "~/.saves/"))          ; don't litter my fs tree
 delete-old-versions    t
 kept-new-versions      8
 kept-old-versions      8
 version-control        t)                        ; use versioned backups

;; Danish calender
(load-file "~/.emacs.d/lisp/da-kalender.el")

(setq exec-path (append exec-path '("/home/erk/.cargo/bin")))
#+END_SRC
** Authentication
#+begin_src emacs-lisp
; https://tobytripp.github.io/emacs.d/mail-in-emacs.html
(defun erk/auth-info (&rest search-spec)
  "Given a LOGIN to search for, return `auth-sources' that match.

Valid search keys are:

  - :user
  - :host
  - :port

Setting :max will have no result as this function only returns a
single result.  If there are multiple matches, the first will be
returned.

Results are returned as an alist with the `:secret' property
pre-evaluated."

  (dolist (default '((:max . 1) (:require . (:secret))))
    (plist-put search-spec (car default) (cdr default)))

  (let ((entry (nth 0 (apply 'auth-source-search search-spec))))
    (mapcar (lambda (e)
              (let ((prop  (car e))
                    (value (if (functionp (cadr e))
                               (funcall (cadr e))
                             (cadr e))))
                (cons prop value)))
            (seq-partition entry 2))))
#+end_src
* Gui
** Intro
Set up some small things to start with:
#+BEGIN_SRC emacs-lisp
;; Turn off start screen.
(setq inhibit-startup-screen t)

;; Turn off tool-bar-mode.
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))

;; Turn off the menu bar.
(menu-bar-mode -1)

;; Don't blink the cursor.
(blink-cursor-mode -1)

;; enable column-number-mode.
(column-number-mode)

;; Remove the scroll bar.
(scroll-bar-mode -1)

;; Fix strange size issues with tiling wms
(setq frame-resize-pixelwise t)
#+END_SRC

Set up scrolling
#+BEGIN_SRC emacs-lisp
;; makes scrolling a bit less jumpy.
(setq mouse-wheel-follow-mouse      t                   ;; scroll window under mouse
      scroll-step                   1                   ;; keyboard scroll one line at a time
      mouse-wheel-progressive-speed nil                 ;; don't accelerate scrollin
      mouse-wheel-scroll-amount     '(1 ((shift) . 1))) ;; one line at a time
#+END_SRC

Set up some ansi colours.
#+BEGIN_SRC emacs-lisp
(setq ansi-color-faces-vector
      [default default default italic underline success warning error])
#+END_SRC

Clean up the mode-line
#+begin_src emacs-lisp
(straight-use-package
 '(blackout :host github :repo "raxod502/blackout"))
(blackout 'tree-sitter)
#+end_src
** Modeline
#+begin_src emacs-lisp
;; Installer ikoner
(use-package all-the-icons)

;; Installer doom-modeline
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src
** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
** Fonts
Set up fonts
#+BEGIN_SRC emacs-lisp
(defvar erk/font "Cascadia Code PL SemiLight-13" "Default font")

;; Berkerley Mono
(setq erk/font "AZTSPM+BerkeleyMono-Regular-10")

(set-frame-font erk/font)
(add-hook 'after-make-frame-functions
    `(lambda (frame)
      (select-frame frame)
      (when (display-graphic-p frame)
        (set-frame-font erk/font))))

(when (member "Twemoji" (font-family-list))
  (set-fontset-font
    t 'symbol (font-spec :family "Twemoji") nil 'prepend))
#+END_SRC
Set up ligatures for Cascadia Code
[[https://github.com/mickeynp/ligature.el]]
#+begin_src emacs-lisp
;; (straight-override-recipe
;;  '(ligature :host github :repo "mickeynp/ligature.el" :branch "master"))
;; (use-package ligature
;;   :load-path "path-to-ligature-repo"
;;   :config
;;   ;; Enable the "www" ligature in every possible major mode 
;;   (ligature-set-ligatures 't '("www"))
;;   ;; Enable traditional ligature support in eww-mode, if the
;;   ;; `variable-pitch' face supports it
;;   (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
;;   ;; Enable all Cascadia Code ligatures in programming modes
;;   (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
;; 				       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
;; 				       "!!." ">=>" ">>=" ">>-" ">->" "->>" "-->" "---" "-<<"
;; 				       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
;; 				       "<--" "<-<" "<<=" "<<-" "<+>" "</>" "###" "#_(" "..<"
;; 				       "..." "+++" "/==" "_|_" "www" "&&" "^=" "~~" "~@" "~="
;; 				       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
;; 				       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
;; 				       ">=" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
;; 				       "<$" "<=" "<>" "<-" "<+" "</" "#{" "#[" "#:" "#=" "#!"
;; 				       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
;; 				       "?=" "?." "??" ";;" "/*" "/=" "/>" "__" "~~" "(*" "*)"
;; 				       "\\\\" "://"))
;;   ;; Disabled ligatures: (">>" "<<" "//" "///" "<<<" ">>>")
;;   ;; Enables ligature checks globally in all buffers. You can also do it
;;   ;; per mode with `ligature-mode'.
;;   (global-ligature-mode t))
#+end_src
** Theme
We start by setting the paren mode to blocks:
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(setq show-paren-style 'expression)
#+END_SRC

We then install the Moe theme [[https://github.com/kuanyui/moe-theme.el]]:
#+BEGIN_SRC emacs-lisp
(use-package moe-theme
  :straight (:type git :host github :repo "kuanyui/moe-theme.el" :branch "dev")
  :ensure t)
;; (setq moe-theme-highlight-buffer-id nil)
(defvar moe-theme-mode-line-color 'red)
(moe-light)
#+END_SRC

*** Custom semantic tokens
#+BEGIN_SRC emacs-lisp
;; (setq lsp-semantic-token-faces
;;       '(("variable.reference" . (t (:inherit lsp-face-semhl-variable :slant italic)))
;;         ("parameter.reference" . (t (inherit lsp-face-semhl-parameter :slant italic)))
;;         ("method.static" . (t (:inherit lsp-face-semhl-method :foreground "#f0c506")))
;;         ("method.public" . (t (:inherit lsp-face-semhl-method :foreground "#eedf54")))
;;         ("method.library" . (t (:inherit lsp-face-semhl-method :foreground "#a5cf0a")))
;;         ("method.library.static" . (t (:inherit lsp-face-semhl-method :foreground "#f0c506")))
;;         ("method.trait" . (t (:inherit lsp-face-semhl-method :foreground "#cca34a")))
;;         ("method.library.trait" . (t (:inherit lsp-face-semhl-method :foreground "#d1ce08")))
;;         ("keyword.unsafe" . (t (:inherit lsp-face-semhl-keyword :foreground "#df732b" :slant italic)))
;;         ("lifetime" . (t (:inherit tree-sitter-hl-face:label :foreground "#11ddcc")))
;;         ("method.static.unsafe" . (t (:inherit lsp-face-semhl-method :foreground "#df732b")))
;;         ("method.declaration.unsafe" . (t (:inherit lsp-face-semhl-method :foreground "#df732b")))
;;         ("*.unsafe" . (t (:inherit lsp-face-semhl-method :foreground "#df732b" :slant italic)))
;;         ("method.library.unsafe" . (t (:inherit lsp-face-semhl-method :foreground "#df732b")))
;;         ("interface.library" . (t (:inherit lsp-face-semhl-interface :foreground "#8ec03e")))
;;         ("generic.attribute" . (t (:inherit tree-sitter-hl-face:attribute :foreground "#fdf9287e")))
;;         ("attribute.attribute" . (t (:inherit tree-sitter-hl-face:attribute :foreground "#8ec03e7e")))
;;         ("parenthesis.attribute" . (t (:inherit tree-sitter-hl-face:attribute :foreground "#338d63")))
;;         ("typeParameter" . (t (:inherit tree-sitter-hl-face:type.argument :foreground "#ca90fa" :weight bold)))
;;         ("selfKeyword" . (t (:inherit lsp-face-semhl-keyword :foreground "#809dff")))
;;         ("enum" . (t (:inherit lsp-face-semhl-keyword :foreground "#17b1d8")))
;;         ("property" . (t (:inherit lsp-face-semhl-keyword :foreground "#75bfe7" :slant italic)))
;;         ("parameter" . (t (:inherit lsp-face-semhl-parameter :foreground "#00afce")))
;;         ("*.consuming" . (t (:inherit lsp-face-semhl-keyword :foreground :weight bold)))
;;         ("namespace" . (t (:inherit lsp-face-semhl-namespace :foreground "#99bfc4")))
;;         ("namespace.library" . (t (:inherit lsp-face-semhl-namespace :foreground "#b4c499")))
;;         ("unresolvedReference" . (t (:inherit lsp-face-semhl-keyword :foreground "#ff493c" :slant italic)))
;;         ("operator" . (t (:inherit tree-sitter-hl-face:operator :foreground "#d4d4d4da")))
;;         ("comma" . (t (:inherit tree-sitter-hl-face:punctuation.delimiter :foreground "#d4d4d4da")))
;;         ("colon" . (t (:inherit tree-sitter-hl-face:punctuation.delimiter :foreground "#d4d4d4da")))
;;         ("semicolon" . (t (:inherit tree-sitter-hl-face:punctuation.delimiter :foreground "#d4d4d4da")))
;;         ("punctuation" . (t (:inherit tree-sitter-hl-face:punctuation.delimiter :foreground "#d4d4d4da")))
;;         ("brace" . (t (:inherit tree-sitter-hl-face:punctuation.bracket :foreground "#f0ddddda")))
;;         ("parenthesis" . (t (:inherit tree-sitter-hl-face:punctuation :foreground "#d4d4d4da")))
;;         ("builtinType" . (t (:inherit tree-sitter-hl-face:type.builtin :foreground "#b7fc89cb")))
;;         ("angle" . (t (:inherit tree-sitter-hl-face:punctuation :foreground "#d4d4d4da")))
;;         ("operator.controlFlow" . (t (:inherit tree-sitter-hl-face:operator :foreground "#fd8b5d")))
;;         ("interface" . (t (:inherit lsp-face-semhl-interface :foreground "#f7ae40")))
;;         ("typeAlias.trait" . (t (:inherit lsp-face-semhl-interface :foreground "#f1e6a3")))
;;         ("keyword.controlFlow" . (t (:inherit lsp-face-semhl-keyword :foreground "#e689bc")))
;;         ("keyword.async" . (t (:inherit lsp-face-semhl-keyword :foreground "#ca99f8")))
;;         ("keyword.async.controlFlow" . (t (:inherit lsp-face-semhl-keyword :foreground "#ca99f8")))
;;         ("macro" . (t (:inherit lsp-face-semhl-keyword :foreground "#c0b5ff")))
;;         ("boolean" . (t (:inherit tree-sitter-hl-face:constant.builtin :foreground "#14b16f")))
;;         ("string" . (t (:inherit lsp-face-semhl-string :foreground "#e98e6a")))))
#+END_SRC
** Goggles
#+begin_src emacs-lisp
(use-package goggles
  :hook ((prog-mode text-mode) . goggles-mode)
  :config
  (setq-default goggles-pulse t))
#+end_src
** Perspective [Disabled]
[[https://github.com/nex3/perspective-el]]
#+BEGIN_SRC emacs-lisp
;; (use-package perspective
;;   :bind
;;   ("C-x C-b" . counsel-switch-buffer)
;;   :config
;;   (persp-mode))
#+END_SRC
* Editor
Indent with spaces
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq indent-tabs-mode nil)
#+END_SRC

Install rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

Install multiple-cursors, the keybinds are in the last chapter
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ctrlf)
(ctrlf-mode +1)
#+END_SRC
** EditorConfig
#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+end_src
** Parinfer
#+begin_src emacs-lisp
(use-package parinfer-rust-mode
    :hook emacs-lisp-mode
    :init
    (setq parinfer-rust-auto-download t))
#+end_src
** Corfu
#+begin_src emacs-lisp
;; (use-package corfu
;;   :init
;;   (corfu-auto t)
;;   (global-corfu-mode))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
   :ensure t)
(yas-reload-all)
#+end_src
* Calender
#+begin_src emacs-lisp
(use-package org-caldav)
(setq org-caldav-url "https://caldav.fastmail.com/dav/calendars/user/valdemar@erk.dev/"
      org-caldav-inbox nil
      org-caldav-calendar-id nil
      org-caldav-calendars '((:calendar-id "9BC13B04-205A-11EC-8468-5AFB85A4DFFC"
                              :inbox "~/org/Kalender/Personlig.org"))
      org-caldav-delete-org-entries 'always
      org-caldab-delete-calendar-entries 'never)
#+end_src
* Org mode
Will have to be cleaned up!
#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t
      org-edit-src-content-indentation 0)

(use-package org-ref
  :ensure t)

(use-package org-superstar
  :ensure t)

(use-package toc-org
  :ensure t
  :init
  (add-hook 'org-mode-hook #'toc-org-mode))

; (use-package auctex
;   :ensure t)
; (use-package cdlatex
;   :ensure t)

(require 'org-ref
         'org-superstar)


(org-babel-do-load-languages 'org-babel-load-languages
                             '((shell . t)
                               (latex . t)
                               (python . t)))


(require 'org)
(require 'ob-dot)

(setq org-log-done t)

(setq org-agenda-files (list "~/org/todo.org" "~/org/Kalender/Personlig.org" "~/work/fusion.org"))

(setq org-latex-default-figure-position "H")

(setq org-src-fontify-natively t)

(setq org-latex-listings 'minted)
;; (setq org-latex-minted-options
;;       '(("frame" "lines")
;;         ("linenos=true")
;;         ("breaklines=true")
;;         ("escapeinside=||")
;;         ("mathescape=true")))
(setq org-latex-minted-options '())


(setq org-latex-pdf-process
      (list "latexmk -shell-escape -bibtex -pdfxe -f  %f"))

(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
(add-hook 'org-mode-hook 'auto-fill-mode)
(add-hook 'org-mode-hook 'org-indent-mode)

;; Only env in beamer
(add-hook 'org-beamer-hook '(add-to-list 'org-beamer-environments-extra
                                         '("onlyenv" "O" "\\begin{onlyenv}%a" "\\end{onlyenv}")))
#+END_SRC
* Org-mode blog
Set up authentication
#+begin_src emacs-lisp
(setenv "SRHT_PAGES_TOKEN"
        (alist-get :secret (erk/auth-info :host "srht" :user "pages")))
#+end_src

Install dependencies
#+begin_src emacs-lisp
(require 'ox-bibtex)
#+end_src

Preamble:
#+begin_src html
<nav>
  <ul>
    <li><a href="home.html">Home</a></li> \
    <li><a href="blog.html">Blog</a></li> \
    <li><a href="news.html">News</a></li> \
  </ul> \
</nav>
#+end_src

Set up the projects
#+begin_src emacs-lisp
(setq org-publish-project-alist
      '(("index"
         :base-directory "~/dev/blog/frontpage/"
         :base-extension "org"
         :publishing-directory "~/dev/blog/build/"
         :publishing-function org-html-publish-to-html
         :headline-levels 3
         :section-numbers nil
         :with-toc nil
         :html-head "<link rel=\"stylesheet\" href=\"../other/emacs.css\" type=\"text/css\"/>"
         :html_head_extra: "<link rel=\"stylesheet\" href=\"../other/main.css\" type=\"text/css\"/>"
         :html-preamble t)
        ("orgfiles"
         :base-directory "~/dev/blog/posts"
         :base-extension "org"
         :publishing-directory "~/dev/blog/build/posts/"
         :publishing-function org-html-publish-to-html
         :headline-levels 3
         :section-numbers nil
         :with-toc t
         :html-head "<link rel=\"stylesheet\" href=\"../other/emacs.css\" type=\"text/css\"/>"
         :html_head_extra "<link rel=\"stylesheet\" href=\"../other/main.css\" type=\"text/css\"/>"
         :html-preamble "<nav>\
  <ul>\
    <li><a href=\"../home.html\">Home</a></li>\
    <li><a href=\"blog.html\">Blog</a></li>\
    <li><a href=\"news.html\">News</a></li>\
  </ul>\
</nav>"
         :html-postamble nil)
        ("images"
         :base-directory "~/dev/blog/images/"
         :base-extension "\\(?:gif\\|\\(?:jp\\|pn\\|sv\\)g\\)"
         :publishing-directory "~/dev/blog/build/images/"
         :publishing-function org-publish-attachment)
        ("other"
         :base-directory "~/dev/blog/other/"
         :base-extension "\\(?:css\\|el\\)"
         :publishing-directory "~/dev/blog/build/other/"
         :publishing-function org-publish-attachment)
        ("blog" :components ("index" "orgfiles" "images" "other"))))
#+end_src
* RSS
Install elfeed and goodies
#+BEGIN_SRC emacs-lisp
(use-package elfeed)
#+END_SRC

Set up list of feeds
#+BEGIN_SRC emacs-lisp
(when (load "~/org/feeds.el" t)
       (require 'feeds))
#+END_SRC
* {Disabled} IRC
#+BEGIN_SRC emacs-lisp
;; (use-package circe
;;   :ensure t)

;; (defun nickserv-password (server)
;;   (alist-get :secret (erk/auth-info :user "erk" :host server)))

;; (setq circe-network-options
;;       '(("Libera"
;;          :host "irc.libera.chat"
;;          :port 7070
;;          :tls t
;;          :nick "erk"
;;          :sasl-username "erk"
;;          :sasl-password nickserv-password
;;          ;; :channels ("#diku" "##rust" "#twilight-rs")
;;          )))

;; (setq circe-use-cycle-completion t
;;       circe-reduce-lurker-spam t)

;; (use-package circe-notifications)
;; (add-hook 'circe-server-connected-hook 'enable-circe-notifications)

;; ;; Logging
;; (enable-lui-logging-globally)

;; (enable-circe-color-nicks)

;; (setq lui-time-stamp-position 'right-margin
;;       lui-time-stamp-format "%H:%M")

;; (add-hook 'lui-mode-hook 'my-circe-set-margin)
;; (defun my-circe-set-margin ()
;;   (setq right-margin-width 5))

;; (eval-after-load 'lui
;;   '(define-key lui-mode-map (kbd "C-c C-b") 'lui-track-bar-move))
#+END_SRC
* Selectrum
#+BEGIN_SRC emacs-lisp
(straight-use-package 'selectrum)
(straight-use-package 'prescient)
(straight-use-package 'selectrum-prescient)
(straight-use-package 'company-prescient)

(selectrum-mode +1)
(selectrum-prescient-mode +1)
(prescient-persist-mode +1)
(company-prescient-mode +1)

(defun erk/backward-kill-sexp (&optional arg)
  "Do not insert the path into the kill ring when going up directonaries"
  (interactive "p")
  (let (kill-ring)
    (selectrum-backward-kill-sexp arg)))

;; Nicer movement between layers
(define-key selectrum-minibuffer-map (kbd "C-<left>") 'erk/backward-kill-sexp)
(define-key selectrum-minibuffer-map (kbd "C-<right>") 'selectrum-insert-current-candidate)
;; Just so you don't have to keep releasing ctrl.
(define-key selectrum-minibuffer-map (kbd "C-<up>") 'selectrum-previous-candidate)
(define-key selectrum-minibuffer-map (kbd "C-<down>") 'selectrum-next-candidate)

(use-package marginalia
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))
  :init
  (marginalia-mode))
#+END_SRC
* Mail [Wanderlust]
We start by setting up smtpmail
#+BEGIN_SRC emacs-lisp
(setq wl-draft-send-mail-function 'wl-draft-send-mail-with-smtp
      smtpmail-debug-info t
      smtpmail-default-smtp-server "smtp.fastmail.com"
      smtpmail-local-domain "erk.dev"
      smtpmail-smtp-user "valdemar@erk.dev"
      smtpmail-smtp-server "smtp.fastmail.com"
      smtpmail-stream-type 'ssl
      smtpmail-smtp-service 465
)
#+END_SRC

We then setup wanderlust, here it should be noted a large part of the
config resides in ~~/.wl~.
#+BEGIN_SRC emacs-lisp
(straight-override-recipe
 '(semi :host github :repo "wanderlust/semi" :branch "semi-1_14-wl"))
(straight-override-recipe
 '(flim :host github :repo "wanderlust/flim" :branch "flim-1_14-wl"))
(straight-override-recipe
 '(apel :host github :repo "wanderlust/apel" :branch "apel-wl"))
(straight-override-recipe
 '(wanderlust :host github :repo "wanderlust/wanderlust" :branch "master"))

(use-package wanderlust
  :ensure t
  :no-require t)

;;Wanderlust
(require 'wl)
(autoload 'wl "wl" "Wanderlust" t)
(autoload 'wl-other-frame "wl" "Wanderlust on new frame." t)
(autoload 'wl-draft "wl-draft" "Write draft with Wanderlust." t)

;; Lidt mere af emnelinjen i `summary-mode`
(setq wl-summary-width 120)
(setq wl-summary-line-format "%n%T%P%M/%D(%W)%h:%m %t%[%26(%c %f%) %] %s")

;; Use ~/.authinfo.gpg for password store
(setq elmo-passwd-storage-type 'auth-source)

;; Open ~/.wl in emacs lisp mode.
(add-to-list 'auto-mode-alist '("\.wl$" . emacs-lisp-mode))
#+END_SRC
* LSP
Install lsp mode
#+BEGIN_SRC emacs-lisp
;(use-package eglot)

#+END_SRC
* Rust
Install packages needed for rustic with rust-analyzer
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode)
;; Seems to be broken
;; (add-hook 'lsp-mode-hook #'lsp-semantic-tokens-mode)
(add-hook 'lsp-mode-hook #'yas-minor-mode)
(setq lsp-keymap-prefix (kbd "C-."))
(define-key lsp-mode-map (kbd "C-.") lsp-command-map)
(use-package company)
(use-package rustic
  :ensure t)
#+END_SRC

Initialize and configure rustic
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'rust-ampersand-face nil
                    :inherit nil)
;; (remove-hook 'rustic-mode-hook 'flycheck-mode)
;; (define-key rustic-mode-map (kbd "TAB") #'company-indent-or-complete-common)
;; (setq company-tooltip-align-annotations t
;;       company-idle-delay 1
;;       company-show-numbers t)
#+END_SRC
* OCaml
#+begin_src emacs-lisp
(use-package tuareg)
#+end_src
* Magit
Install Magit and magit forge and setup ssh agent
#+begin_src emacs-lisp
(use-package magit)
(use-package forge)
;; (use-package orgit-forge)

;; (use-package exec-path-from-shell)
;; (exec-path-from-shell-copy-env "SSH_AGENT_PID")
;; (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")

(use-package keychain-environment
  :init
  (keychain-refresh-environment))

(use-package magit-delta)
(setq magit-delta-delta-executable "/home/erk/.cargo/bin/delta")
(add-hook 'magit-mode-hook (lambda () (magit-delta-mode +1)))
#+end_src
* Zig
#+begin_src emacs-lisp
(straight-use-package 'zig-mode)
(setq lsp-zig-zls-executeable "/usr/bin/zls")
(add-hook 'zig-mode-hook #'lsp)
#+end_src
* Misc
** PDF viewer
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :init
  (pdf-tools-install))
#+END_SRC
** Futhark
#+BEGIN_SRC emacs-lisp
(use-package futhark-mode)
#+END_SRC
** Restart emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs)
#+END_SRC
** Vterm
#+BEGIN_SRC emacs-lisp
(use-package vterm)
#+END_SRC
** Tree-Sitter
#+BEGIN_SRC emacs-lisp
(straight-use-package 'tree-sitter)
(straight-use-package 'tree-sitter-langs)

(require 'tree-sitter)
(require 'tree-sitter-langs)

(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+END_SRC
** StumpVM
#+BEGIN_SRC emacs-lisp
; Load stumpwm config as lisp.
(add-to-list 'auto-mode-alist '("stumpwm/config$" . lisp-mode))
#+END_SRC
** Emacs Everywhere
[[https://github.com/tecosaur/emacs-everywhere]]
#+begin_src emacs-lisp

(straight-use-package 'emacs-everywhere)
(require 'emacs-everywhere)
#+end_src
** Godbolt
#+begin_src emacs-lisp
(straight-use-package 'rmsbolt)
(require 'rmsbolt)
#+end_src
* Keybinds
#+BEGIN_SRC emacs-lisp
;; Turn off the most annoying keybinds
(global-unset-key (kbd "<insert>"))
(global-unset-key (kbd "C-z"))

;; Windmove alt+←↓↑→
(windmove-default-keybindings 'meta)

;(global-set-key (kbd "C-s") 'swiper)
;(global-set-key (kbd "C-x b") 'ivy-switch-buffer)
;(global-set-key (kbd "C-c C-r") 'ivy-resume)
;; (global-set-key (kbd "M-x") 'counsel-M-x)
;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)

(global-set-key (kbd "<f9>") 'display-line-numbers-mode)
(global-set-key (kbd "<f12>") 'menu-bar-mode)

;; Org mode
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)

;; Multiple cursors
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC
